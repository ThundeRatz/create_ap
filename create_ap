#!/usr/bin/env bash
# This script was generated by bashly 1.2.11 (https://bashly.dev)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
create_ap_usage() {
  printf "create_ap - A tool for managing linux-router\n\n"

  printf "%s\n" "Usage:"
  printf "  create_ap COMMAND\n"
  printf "  create_ap [COMMAND] --help | -h\n"
  printf "  create_ap --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   list all available interfaces\n" "$(green "list") "
  printf "  %s   read config.json and use linux-router to create an access point\n" "$(green "start")"
  printf "  %s   kill all running daemons and restore normal wifi setup\n" "$(green "stop") "
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
create_ap_list_usage() {
  printf "create_ap list - list all available interfaces\n\n"

  printf "%s\n" "Usage:"
  printf "  create_ap list\n"
  printf "  create_ap list --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
create_ap_start_usage() {
  printf "create_ap start - read config.json and use linux-router to create an access point\n\n"

  printf "%s\n" "Usage:"
  printf "  create_ap start [OPTIONS]\n"
  printf "  create_ap start --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--config, -c CONFIG"
    printf "    path to config file. Defaults to ./config.json\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
create_ap_stop_usage() {
  printf "create_ap stop - kill all running daemons and restore normal wifi setup\n\n"

  printf "%s\n" "Usage:"
  printf "  create_ap stop\n"
  printf "  create_ap stop --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/colors.sh

enable_auto_colors() {
  if [[ -z ${NO_COLOR+x} && ! -t 1 ]]; then
    NO_COLOR=1
  fi
}

print_in_color() {
  local color="$1"
  shift
  if [[ "${NO_COLOR:-}" == "" ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
black() { print_in_color "\e[30m" "$*"; }
white() { print_in_color "\e[37m" "$*"; }

bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }

red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
black_bold() { print_in_color "\e[1;30m" "$*"; }
white_bold() { print_in_color "\e[1;37m" "$*"; }

red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }
black_underlined() { print_in_color "\e[4;30m" "$*"; }
white_underlined() { print_in_color "\e[4;37m" "$*"; }

# :command.command_functions
# :command.function
create_ap_list_command() {

  # src/commands/list.sh
  echo "NAME FULLNAME"

  nmcli | rg '^(\w+):.+$\n\s+"(.+)"' --multiline -or '$1: $2'

}

# :command.function
create_ap_start_command() {

  # src/commands/start.sh
  if ! (id | grep -q root); then
    echo "$(red_bold "ERROR: You must run this command as root")"
    exit 1
  fi

  config_path="$(dirname $0)/config.json"
  if [ -n "${args[--config]}" ]; then
    config_path="${args[--config]}"
  fi

  if [ ! -f "$config_path" ]; then
    echo "$(red_bold "ERROR: config.json does not exist")"
    echo "config.json must have the following format"
    cat <<EOF
{
  "hostname": "ap_name",
  "password": "ap_password",
  "interface_fullname": "Broadcom BCM4354 WLAN card"
}
// You can find "interface_fullname" using 'create_ap list'
EOF
    exit 1
  fi

  hostname="$(jq -r .hostname "$config_path")"
  password="$(jq -r .password "$config_path")"
  fullname="$(jq -r .interface_fullname "$config_path")"

  if [[ -z "$fullname" ]]; then
    echo "$(red_bold "ERROR: interface_fullname is invalid")"
    echo "Run 'create_ap list'"
    exit
  fi

  list_cmd="create_ap list"

  if [[ -z "$($list_cmd | rg "$fullname")" ]]; then
    echo "$(red_bold "ERROR: interface with fullname '$fullname' was not found")"
    exit
  fi

  interface="$($list_cmd | rg "$fullname" | cut -d':' -f1 | head -n1)"

  echo "$(green "creating access point...")"
  echo
  echo "hostname:           $hostname"
  echo "password:           $password"
  echo "interface:          $interface"
  echo "interface_fullname: $fullname"
  echo

  if [ "$(cat /sys/module/bcmdhd/parameters/op_mode)" -ne 2 ]; then
    echo "Changing op_mode to 2 (AP mode)"
    echo 2 >/sys/module/bcmdhd/parameters/op_mode
    systemctl restart network-manager
  fi

  lnxrouter --ap "$interface" "$hostname" -p "$password" -g 12 --no-virt ${other_args[@]}

}

# :command.function
create_ap_stop_command() {

  # src/commands/stop.sh
  if ! (id | grep -q root); then
    echo "$(red_bold "You must run this command as root")"
    exit 1
  fi

  set +e

  echo "$(yellow "killing all running lnxrouter daemons")"
  lnxrouter -l | rg '^(\d+)\s\w+' -or '$1' | xargs kill

  if [ "$(cat /sys/module/bcmdhd/parameters/op_mode)" -eq 2 ]; then
    echo "Changing op_mode to 1 (WIFI mode)"
    echo 1 >/sys/module/bcmdhd/parameters/op_mode
    systemctl restart network-manager
  fi

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        create_ap_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    list)
      action="list"
      shift
      create_ap_list_parse_requirements "$@"
      shift $#
      ;;

    start)
      action="start"
      shift
      create_ap_start_parse_requirements "$@"
      shift $#
      ;;

    stop)
      action="stop"
      shift
      create_ap_stop_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      create_ap_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
create_ap_list_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        create_ap_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="list"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
create_ap_start_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        create_ap_start_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="start"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --config | -c)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--config']="$2"
          shift
          shift
        else
          printf "%s\n" "--config requires an argument: --config, -c CONFIG" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
create_ap_stop_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        create_ap_stop_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="stop"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  declare -g version="0.1.0"
  set -e

}

# :command.run
run() {
  # :command.globals
  declare -g long_usage=''
  declare -g -A args=()
  declare -g -A deps=()
  declare -g -a env_var_names=()
  declare -g -a input=()

  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "list") create_ap_list_command ;;
    "start") create_ap_start_command ;;
    "stop") create_ap_stop_command ;;
  esac
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  initialize
  run "$@"
fi
